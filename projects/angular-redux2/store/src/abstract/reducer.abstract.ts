/**
 * Import third-party types
 */

import type { AnyAction, Reducer } from 'redux';

/**
 * Angular-redux types
 */

import type { ActionCreator } from '../interfaces/store.interface';

export abstract class AbstractReducer {

    /**
     * Hold map of all dispatch action that generated by decorator
     *
     * @example
     * ```typescript
     * class Reducer extends AbstractReducer {
     *     // optional static var to allow to add type's for auto-complete
     *     // ActionPayload< payload interface / state >
     *     static override actions: ActionPayload<Reducer>;
     * }
     * ```
     */

    static actions: {
        [key: string]: ActionCreator<any>
    } = {};

    /**
     * Creates a Redux reducer based on the methods of the instantiated class.
     *
     * @example
     * ```typescript
     * class Reducer extends AbstractReducer {
     *
     *     // optional static var to allow to add type's for auto-complete
     *     // ActionPayload< payload interface / state >
     *     static override actions: ActionPayload<Reducer>;
     *
     *     @Action
     *     deleteBug(state: Auth, action: AnyAction) {
     *         return { active_bug: !state.active_bug };
     *     }
     * }
     *
     * export const authReducer = Reducer.createReducer(BUG_INITIAL_STATE);
     * ```
     * @param {new () => any} this - The class constructor.
     * @param {any} initialState - The initial state for the reducer.
     * @returns {Reducer<State>} A Redux reducer that can be used with createStore.
     */

    static createReducer<State = any>(this: new () => any, initialState: any): Reducer<State> {
        const instance = new this();
        const namespace = instance.constructor.name + '/';

        return (lastState: State = initialState, action: AnyAction): State => {
            const actionName = action.type.replace(namespace, '');
            const fn = instance[actionName];

            if (fn) {
                return fn.apply(instance, [ lastState, action['payload'] ]);
            }

            return lastState;
        };
    }
}
